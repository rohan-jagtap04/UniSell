{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\n\nconst dataProperties = require('./data-properties');\n\nfunction blankSummary() {\n  const empty = () => ({\n    total: 0,\n    covered: 0,\n    skipped: 0,\n    pct: 'Unknown'\n  });\n\n  return {\n    lines: empty(),\n    statements: empty(),\n    functions: empty(),\n    branches: empty()\n  };\n} // asserts that a data object \"looks like\" a summary coverage object\n\n\nfunction assertValidSummary(obj) {\n  const valid = obj && obj.lines && obj.statements && obj.functions && obj.branches;\n\n  if (!valid) {\n    throw new Error('Invalid summary coverage object, missing keys, found:' + Object.keys(obj).join(','));\n  }\n}\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n */\n\n\nclass CoverageSummary {\n  /**\n   * @constructor\n   * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n   * another coverage summary to initialize this object with.\n   */\n  constructor(obj) {\n    if (!obj) {\n      this.data = blankSummary();\n    } else if (obj instanceof CoverageSummary) {\n      this.data = obj.data;\n    } else {\n      this.data = obj;\n    }\n\n    assertValidSummary(this.data);\n  }\n  /**\n   * merges a second summary coverage object into this one\n   * @param {CoverageSummary} obj - another coverage summary object\n   */\n\n\n  merge(obj) {\n    const keys = ['lines', 'statements', 'branches', 'functions'];\n    keys.forEach(key => {\n      this[key].total += obj[key].total;\n      this[key].covered += obj[key].covered;\n      this[key].skipped += obj[key].skipped;\n      this[key].pct = percent(this[key].covered, this[key].total);\n    });\n    return this;\n  }\n  /**\n   * returns a POJO that is JSON serializable. May be used to get the raw\n   * summary object.\n   */\n\n\n  toJSON() {\n    return this.data;\n  }\n  /**\n   * return true if summary has no lines of code\n   */\n\n\n  isEmpty() {\n    return this.lines.total === 0;\n  }\n\n}\n\ndataProperties(CoverageSummary, ['lines', 'statements', 'functions', 'branches']);\nmodule.exports = {\n  CoverageSummary\n};","map":{"version":3,"names":["percent","require","dataProperties","blankSummary","empty","total","covered","skipped","pct","lines","statements","functions","branches","assertValidSummary","obj","valid","Error","Object","keys","join","CoverageSummary","constructor","data","merge","forEach","key","toJSON","isEmpty","module","exports"],"sources":["/Users/baccha/Desktop/UniSell/node_modules/istanbul-lib-coverage/lib/coverage-summary.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst percent = require('./percent');\nconst dataProperties = require('./data-properties');\n\nfunction blankSummary() {\n    const empty = () => ({\n        total: 0,\n        covered: 0,\n        skipped: 0,\n        pct: 'Unknown'\n    });\n\n    return {\n        lines: empty(),\n        statements: empty(),\n        functions: empty(),\n        branches: empty()\n    };\n}\n\n// asserts that a data object \"looks like\" a summary coverage object\nfunction assertValidSummary(obj) {\n    const valid =\n        obj && obj.lines && obj.statements && obj.functions && obj.branches;\n    if (!valid) {\n        throw new Error(\n            'Invalid summary coverage object, missing keys, found:' +\n                Object.keys(obj).join(',')\n        );\n    }\n}\n\n/**\n * CoverageSummary provides a summary of code coverage . It exposes 4 properties,\n * `lines`, `statements`, `branches`, and `functions`. Each of these properties\n * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.\n * `pct` is a percentage number (0-100).\n */\nclass CoverageSummary {\n    /**\n     * @constructor\n     * @param {Object|CoverageSummary} [obj=undefined] an optional data object or\n     * another coverage summary to initialize this object with.\n     */\n    constructor(obj) {\n        if (!obj) {\n            this.data = blankSummary();\n        } else if (obj instanceof CoverageSummary) {\n            this.data = obj.data;\n        } else {\n            this.data = obj;\n        }\n        assertValidSummary(this.data);\n    }\n\n    /**\n     * merges a second summary coverage object into this one\n     * @param {CoverageSummary} obj - another coverage summary object\n     */\n    merge(obj) {\n        const keys = ['lines', 'statements', 'branches', 'functions'];\n        keys.forEach(key => {\n            this[key].total += obj[key].total;\n            this[key].covered += obj[key].covered;\n            this[key].skipped += obj[key].skipped;\n            this[key].pct = percent(this[key].covered, this[key].total);\n        });\n\n        return this;\n    }\n\n    /**\n     * returns a POJO that is JSON serializable. May be used to get the raw\n     * summary object.\n     */\n    toJSON() {\n        return this.data;\n    }\n\n    /**\n     * return true if summary has no lines of code\n     */\n    isEmpty() {\n        return this.lines.total === 0;\n    }\n}\n\ndataProperties(CoverageSummary, [\n    'lines',\n    'statements',\n    'functions',\n    'branches'\n]);\n\nmodule.exports = {\n    CoverageSummary\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA9B;;AAEA,SAASE,YAAT,GAAwB;EACpB,MAAMC,KAAK,GAAG,OAAO;IACjBC,KAAK,EAAE,CADU;IAEjBC,OAAO,EAAE,CAFQ;IAGjBC,OAAO,EAAE,CAHQ;IAIjBC,GAAG,EAAE;EAJY,CAAP,CAAd;;EAOA,OAAO;IACHC,KAAK,EAAEL,KAAK,EADT;IAEHM,UAAU,EAAEN,KAAK,EAFd;IAGHO,SAAS,EAAEP,KAAK,EAHb;IAIHQ,QAAQ,EAAER,KAAK;EAJZ,CAAP;AAMH,C,CAED;;;AACA,SAASS,kBAAT,CAA4BC,GAA5B,EAAiC;EAC7B,MAAMC,KAAK,GACPD,GAAG,IAAIA,GAAG,CAACL,KAAX,IAAoBK,GAAG,CAACJ,UAAxB,IAAsCI,GAAG,CAACH,SAA1C,IAAuDG,GAAG,CAACF,QAD/D;;EAEA,IAAI,CAACG,KAAL,EAAY;IACR,MAAM,IAAIC,KAAJ,CACF,0DACIC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,IAAjB,CAAsB,GAAtB,CAFF,CAAN;EAIH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAN,CAAsB;EAClB;AACJ;AACA;AACA;AACA;EACIC,WAAW,CAACP,GAAD,EAAM;IACb,IAAI,CAACA,GAAL,EAAU;MACN,KAAKQ,IAAL,GAAYnB,YAAY,EAAxB;IACH,CAFD,MAEO,IAAIW,GAAG,YAAYM,eAAnB,EAAoC;MACvC,KAAKE,IAAL,GAAYR,GAAG,CAACQ,IAAhB;IACH,CAFM,MAEA;MACH,KAAKA,IAAL,GAAYR,GAAZ;IACH;;IACDD,kBAAkB,CAAC,KAAKS,IAAN,CAAlB;EACH;EAED;AACJ;AACA;AACA;;;EACIC,KAAK,CAACT,GAAD,EAAM;IACP,MAAMI,IAAI,GAAG,CAAC,OAAD,EAAU,YAAV,EAAwB,UAAxB,EAAoC,WAApC,CAAb;IACAA,IAAI,CAACM,OAAL,CAAaC,GAAG,IAAI;MAChB,KAAKA,GAAL,EAAUpB,KAAV,IAAmBS,GAAG,CAACW,GAAD,CAAH,CAASpB,KAA5B;MACA,KAAKoB,GAAL,EAAUnB,OAAV,IAAqBQ,GAAG,CAACW,GAAD,CAAH,CAASnB,OAA9B;MACA,KAAKmB,GAAL,EAAUlB,OAAV,IAAqBO,GAAG,CAACW,GAAD,CAAH,CAASlB,OAA9B;MACA,KAAKkB,GAAL,EAAUjB,GAAV,GAAgBR,OAAO,CAAC,KAAKyB,GAAL,EAAUnB,OAAX,EAAoB,KAAKmB,GAAL,EAAUpB,KAA9B,CAAvB;IACH,CALD;IAOA,OAAO,IAAP;EACH;EAED;AACJ;AACA;AACA;;;EACIqB,MAAM,GAAG;IACL,OAAO,KAAKJ,IAAZ;EACH;EAED;AACJ;AACA;;;EACIK,OAAO,GAAG;IACN,OAAO,KAAKlB,KAAL,CAAWJ,KAAX,KAAqB,CAA5B;EACH;;AA9CiB;;AAiDtBH,cAAc,CAACkB,eAAD,EAAkB,CAC5B,OAD4B,EAE5B,YAF4B,EAG5B,WAH4B,EAI5B,UAJ4B,CAAlB,CAAd;AAOAQ,MAAM,CAACC,OAAP,GAAiB;EACbT;AADa,CAAjB"},"metadata":{},"sourceType":"script"}